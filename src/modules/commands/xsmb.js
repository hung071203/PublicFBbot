const fs = require('fs');
const path = require('path');

module.exports.config = {
  name: "xsmb",
  version: "1.0.0",
  credits: "Hung dep trai",
  description: "ki·ªÉm tra k·∫øt qu·∫£ s·ªï s·ªë h√¥m nay/ Mua v√© s·ªë",
  tag: 'Money',
  usage: "!xsmb [buy/show/(ƒë·ªÉ tr·ªëng n·∫øu mu·ªën ki·ªÉm tra k·∫øt qu·∫£)] [s·ªë v√©(6 ch·ªØ s·ªë/n·∫øu nhi·ªÅu v√© th√¨ m·ªói v√© c√°ch nhau b·∫±ng 1 kho·∫£ng tr·∫Øng)]"
  , countDown: 700, role: 3
};
let xsmbUsers = require('../../savefile/xsmb.json')
const giai = ['ƒë·∫∑c bi·ªát', 'nh·∫•t', 'nh√¨', 'ba', 't∆∞', 'nƒÉm', 's√°u', 'b·∫£y']
const moneys = [10000000, 500000, 200000, 100000, 20000, 8000, 4000, 2000]
module.exports.onload = function (api, client) {
  setInterval(async () => {
    let Time = new Date().toLocaleString('vi-VN', { timeZone: 'Asia/Ho_Chi_Minh' })
    if (Time.includes('19:00:00')) {
      try {
        const response = await getData();
        if (!response) return
        const { openTime, detail } = response
        const numberArray = JSON.parse(detail);
        let msgs = '‚úÖK·∫øt qu·∫£ XSMB ng√†y ' + openTime + '\n'
        numberArray.forEach((number, index) => {
          msgs += `‚ÜíGi·∫£i ${giai[index]}: ${number}\n`
        })
        msgs += 'üëâS·ª≠ d·ª•ng xsmb show ƒëeÃÇÃâ xem ng∆∞·ªùi th·∫Øng cu·ªôc!'
        xsmbUsers = xsmbUsers.filter(item => item.isUse == false)
        const allBox = await client.apis['database'].allThreadConfig()
        if (allBox.length == 0) return
        for (const box of allBox) {
          const { threadID, time } = box
          if (time < Date.now()) continue
          // api.sendMessage(msgs, threadID);
          await getUser(client, numberArray, threadID)
        }
        saveXsmbUsers()
      } catch (error) {
        console.error(error)
      }
    }
  }, 1000);
}
const axios = require('axios');

async function getData() {
  try {
    const response = await axios.get('https://xoso188.net/api/front/open/lottery/history/list/5/miba');
    // console.log(response.data);
    const data = response.data;
    if (!data.success) return null
    const xsmb = data.t.issueList[0]
    return xsmb
  } catch (error) {
    throw error
  }
}

async function getUser(client, numberArray, threadID) {
  let arrUser = xsmbUsers.filter(item =>item.threadID == threadID && item.isUse == false)
  if (arrUser.length == 0) return
  for (const user of arrUser) {
    user.isUse = true
    for(const ve of user.ve) {
      const index = checkLotteryNumber(ve, numberArray)
      if(index != -1) continue
      const money = moneys[index]
      let data = await client.apis['database'].getBank(threadID, user.userID)
      if(!data) continue
      data.money += money
      await client.apis['database'].addBank(data)
    }
  }
}

function checkLotteryNumber(lotteryNumber, numberArray) {
  lotteryNumber = lotteryNumber.toString();
  // Bi·∫øn l∆∞u v·ªã tr√≠ nh·ªè nh·∫•t khi tr√πng kh·ªõp
  let minIndex = -1;

  // Duy·ªát qua t·ª´ng ph·∫ßn t·ª≠ trong m·∫£ng
  for (let i = 0; i < numberArray.length; i++) {
    const numbers = numberArray[i].split(','); // T√°ch chu·ªói th√†nh c√°c s·ªë ri√™ng l·∫ª

    // Ki·ªÉm tra t·ª´ng s·ªë trong m·∫£ng con
    for (let j = 0; j < numbers.length; j++) {
      numbers[j] = numbers[j].toString();
      // So s√°nh 6 ch·ªØ s·ªë cu·ªëi c·ªßa s·ªë nh·∫≠p v√†o v·ªõi s·ªë trong m·∫£ng
      if (lotteryNumber.endsWith(numbers[j])) {
        if (minIndex === -1 || i < minIndex) {
          minIndex = i;
        }
      }
    }
  }
  return minIndex
}

function saveXsmbUsers() {
  const filePathBT = path.join(__dirname, '..', '..', 'savefile', 'xsmb.json');
  fs.writeFile(filePathBT + '.tmp', JSON.stringify(xsmbUsers, null, 2), { encoding: 'utf8' }, (err) => {
    if (err) {
      console.error('L·ªói khi l∆∞u tien file:', err);
    } else {
      fs.rename(filePathBT + '.tmp', filePathBT, (err) => {
        if (err) {
          console.error('L·ªói khi ƒë·ªïi t√™n file:', err);
        }
      });
    }
  });
}
module.exports.run = async function (api, event, args, client) {
  console.log(args[1]);
  if(!args[1]) {args[1] = 'show'}
  switch (args[1]) {
    case 'show':
      try {
        const response = await getData();
        if (!response) return
        const { openTime, detail } = response
        const numberArray = JSON.parse(detail);
        let msgs = '‚úÖK·∫øt qu·∫£ XSMB ng√†y ' + openTime + ':\n'
        numberArray.forEach((number, index) => {
          
          msgs += `‚ÜíGi·∫£i ${giai[index]}: ${number}\n`
        })
        let arrItem = xsmbUsers.filter(item => item.userID == event.senderID && item.threadID == event.threadID)
        if(arrItem.length == 0) {
          msgs += '‚ùóB·∫°n hi·ªán kh√¥ng c√≥ l·ªãch s·ª≠ mua v√© s·ªë trong 2 ng√†y g·∫ßn ƒë√¢y!\n'
        }else {
          arrItem.forEach(item => {
            if (item.isUse) {
              msgs += `‚úÖT·ªïng s·ªë v√© ƒë√£ mua h√¥m qua: ${item.ve.join(', ')}\n`
            }else{
              msgs += `‚úÖT·ªïng s·ªë v√© ƒë√£ mua h√¥m nay: ${item.ve.join(', ')}\n‚ö†Ô∏èVui l√≤ng ƒë·ª£i ƒë·∫øn 19h ƒë·ªÉ ki·ªÉm tra k·∫øt qu·∫£ v√© s·ªë h√¥m nay\n `
            }
          })
        }
        msgs += 'üìùS·ª≠ d·ª•ng xsmb rule ƒë·ªÉ xem c∆° c·∫•u gi·∫£i th∆∞·ªüng!'
        api.sendMessage(msgs, event.threadID, event.messageID)
      } catch (error) {
        api.sendMessage(error.message, event.threadID, event.messageID)
      }
      break;
    case 'buy':
      if (!args[2]) return api.sendMessage('Vui l√≤ng nh·∫≠p s·ªë v√©', event.threadID, event.messageID);
      const arrNum = args.slice(2);
      const veso = xsmbUsers.filter(item => item.isUser == false).flatMap(item => item.ve);
      console.log(arrNum, veso);

      // L·ªçc c√°c s·ªë trong `arrNum` kh√¥ng tr√πng l·∫∑p v√† ƒë√°p ·ª©ng c√°c ƒëi·ªÅu ki·ªán
      const allValid = [...new Set(arrNum)].filter(num =>
        !isNaN(num) && num <= 999999 && !veso.includes(num)
      );
      if (allValid.length == 0) return api.sendMessage('T·∫•t c·∫£ c√°c v√© ƒë√£ ƒë∆∞·ª£c nh·ªØng ng∆∞·ªùi kh√°c mua h·∫øt ho·∫∑c ƒë·ªãnh d·∫°ng v√© s·ªë k ƒë√∫ng!', event.threadID, event.messageID)
      let userBank = await client.apis['database'].getBank(event.threadID, event.senderID)
      if (userBank.money < allValid.length * 100) return api.sendMessage('B·∫°n kh√¥ng ƒë·ªß ti·ªÅn ƒë·ªÉ mua, c·∫ßn th√™m ' + (allValid.length * 100 - userBank.money) + '$', event.threadID, event.messageID)
      userBank.money -= allValid.length * 100
      client.apis['database'].addBank(userBank)
      let item = xsmbUsers.find(item => item.userID == event.senderID && item.threadID == event.threadID && item.isUse == false)
      if(!item) {
        xsmbUsers.push({ userID: event.senderID, threadID: event.threadID, isUse: false, ve: allValid})
      }else{
        item.ve = item.ve.concat(allValid)
      }
      saveXsmbUsers()
      api.sendMessage(`üí∏ƒê√£ mua ${allValid.length} v√© s·ªë\nüé´T·ªïng s·ªë v√© c·ªßa b·∫°n hi·ªán t·∫°i: ${(item?.ve || allValid).join(', ')}\nVui l√≤ng ƒë·ª£i ƒë·∫øn 19h ƒë·ªÉ xem k·∫øt qu·∫£`, event.threadID, event.messageID);
      break;
    case 'rule':
      let msgs = '‚úÖC∆° c·∫•u gi·∫£i th∆∞·ªüng:\n'
      giai.forEach((item, index) => {
        msgs += `‚ÜíGi·∫£i ${item}: ${moneys[index].toLocaleString('en-US')}$\n`
      })
      api.sendMessage(msgs, event.threadID, event.messageID)
      break
    // case 'run':
    //   try {
    //     const response = await getData();
    //     if (!response) return
    //     const { openTime, detail } = response
    //     const numberArray = JSON.parse(detail);
    //     let msgs = '‚úÖK·∫øt qu·∫£ XSMB ng√†y ' + openTime + '\n'
    //     numberArray.forEach((number, index) => {
    //       msgs += `‚ÜíGi·∫£i ${giai[index]}: ${number}\n`
    //     })
    //     msgs += 'üëâS·ª≠ d·ª•ng xsmb show ƒëeÃÇÃâ xem ng∆∞·ªùi th·∫Øng cu·ªôc!'
    //     xsmbUsers = xsmbUsers.filter(item => item.isUse == false)
    //     const allBox = await client.apis['database'].allThreadConfig()
    //     if (allBox.length == 0) return
    //     for (const box of allBox) {
    //       const { threadID, time } = box
    //       if (time < Date.now()) continue
    //       api.sendMessage(msgs, threadID);
    //       await getUser(client, numberArray, threadID)
    //     }
    //     saveXsmbUsers()
    //   } catch (error) {
    //     console.error(error)
    //   }
    //   break
    default:
      api.sendMessage('C√∫ ph√°p kh√¥ng h·ª£p l·ªá!', event.threadID, event.messageID);
      break;
  }
}